#!/bin/bash
#
# BECAUSE SOMETIMES MEMORY JUST ISN'T ENOUGH
#
# 
  function usage {
    echo 'Usage: howto [what]'
    echo '  Examples for [what]:'
    echo '  tar   : how to tar stuff!'
    echo '  ssh   : everything ssh'
    echo '  ln    : link files'
    echo '  rsync : synchronising filesystems'
    echo '  regex : regular expressions'
    echo '  sed   : this is the hardest one'
    echo '  gau   : Gaussian related commands'
    echo '  pgi   : Portland compiler info'
    echo '  tags  : ctags to follow code'
    echo '  misc  : miscellanea commands'
  }
#
# Help!
  if [ ${#} -eq 0 ]; then
    usage
    exit 0
  fi
#
# Now do the work
  for input in ${@}; do
    case ${input} in
      ams )
        echo 'COMPILING'
        echo '  cd $AMSHOME; source $( find ${AMSHOME} -maxdepth 1 -name amsbashrc.sh )'
        echo '  Install/configure -b "myconfig -o GNU -p intelmpi -staticmkl"'
        echo '  $AMSBIN/foray -j 8'
      ;;
      conda )
        echo '  conda activate myenv'
        echo '  conda install numpy matplotlib'
        echo '  conda deactivate'
      ;;
      fq )
        echo 'Rick:'
        echo '    O'
        echo '      CHI 0.116859'
        echo '      ETA 0.584852'
        echo '    SUBEND'
        echo '    H'
        echo '      CHI 0.000001'
        echo '      ETA 0.625010'
        echo '    SUBEND'
        echo 'Giovannini:'
        echo '    O'
        echo '      CHI 0.189194'
        echo '      ETA 0.523700'
        echo '    SUBEND'
        echo '    H'
        echo '      CHI 0.012767'
        echo '      ETA 0.537512'
        echo '    SUBEND'
      ;;
      gau )
        echo "DEBUG COMPILATION:"
        echo "  (with setgau) makec l502c"
        echo "FIND WHERE CALCULATION DIES:"
        echo "  ulimit -c unlimited"
        echo "  [run calculation normally to get the core]"
        echo "  gdb path/l502.exe core.12345 ; then type where"
        echo "PERMISSIONS:"
        echo '  for file in $( find ${g16root} \( -name *.F -o -name *.make \) -print ); do chgrp gausrc ${file}; done'
        echo "COMPILE Gaussian:"
        echo "  tcsh"
        echo '  setenv g16root `pwd`'
        echo '  source $g16root/g16/bsd/g16.login'
        echo '  source ~/.tcshrc (FOR PGI, DEPENDS ON MACHINE)'
        echo '  rehash; cd $g16root/g16'
        echo '  nohup ./bsd/bldg16 all > & build.log &'
      ;;
      git )
	echo "INTRO:"
	echo "  Git is a data structure stored in a Repository within the folder .git"
	echo "    git init (creates a repository in current directory)"
	echo "  A repository is a set of Commit Objects (each with its SHA1 name, its files, and its references to parent objects)"
	echo "  and Branches (references to the commit objects)"
	echo "    A commit object has a Name (found with git log), references to Parent commit objects, and the files that compose it"
	echo "    The current branch is referenced as HEAD, and the main one is referenced as master"
	echo "WORKFLOW:"
	echo "  git log                  (shows the log of all commits up to the initial one)"
	echo "  git status               (to see which files I have changed)"
	echo "  git diff                 (to see exactly what I changed or differences between commits with arguments [head1]..[head2])"
	echo "  git {add,mv,rm}          (to add, move, remove files in this commit)"
	echo "  git commit -am [message] (to commit changes)"
	echo "    Note: -m allows to specify the message in command line rather than in the file itself, -a commits all modified files"
	echo "          alternatively just use git add [files] to specify which files to commit (unchanged files are added automatically)"
	echo "BRANCHING:"
	echo "  git branch                                                             (lists the branches)"
	echo "  git branch -d [branch_name]                                            (deletes a branch)"
	echo "  git branch [new_branch_head_name] [reference_to_object_to_branch_from] (creates branch)"
	echo "    Note: You can use git log to find the SHA1 name of the object to branch from or use its branch name (maybe)"
	echo "  git checkout [branch_head_name]                                        (sets the branch as current branch)" 
	echo "  git pull . [source_head]                                               (pull the changes from the source_head into the current head)" 
	echo "COLLABORATING:"
	echo "  git clone [repository_address] (get and thus join a repository)"
        echo "  git fetch origin (get changes made by others from the server)"
        echo "  git merge origin master (merge the changes done by me and others)"
        echo "  git push origin (push my changes to the repository)"
	echo "WEB:"
	echo "  git push -u origin master"
	echo "NOTES:"
	echo "  Maintain a stable master commit and create a new branch before developing new features"
	echo "  Always commit any changes before changing branch with git checkout"
	echo "  Use merge to draw new features into the master branch, or more rarely to pull a bugfixed master into the development version"
      ;;
      gromacs | gmx )
	echo "  gmx_mpi trjconv -sep -b SKIP_ps -dt DELTAt_ps -f TRAJECTORY.xtc -o OUTPUT.pdb"
      ;;
      howto | -h )
	usage
      ;;
      ln )
	echo "ln original link"
      ;;
      mutt )
        echo 'mutt -s "Subject" -a attachment.dat -- recipient@gmail.com <<< "bla bla"'
        echo 'mutt -s "Subject" -a attachment.dat -- recipient@gmail.com < file.txt'
      ;;
      pdf )
        echo "pdfunite file1.pdf file2.pdf filemerge.pdf"
        echo "pdfseparate [-f 2 -l 5] file.pdf file%d.pdf"
        echo 'pdftocairo -svg ${file} ${file%.pdf}.svg' 
      ;;
      pgi )
        echo "Loading PGI (as root, password L1Gr0up or L1Gr0up123)"
        echo 'cd ${PGIDIR}/bin ; ./lmgrd'
      ;;
      python )
	echo 'PRINTING'
	echo '  format = "Hello %s you have %.2f dollars"'
        echo '  mytuple = ("Franco",7.00)'
	echo '  print format % mytuple'
        echo '  %s ; %d ; %.3f  # Format types for string (also numbers), integer, float with 3 mantissa digits'
	echo 'TYPES: No typing necessary, everything is an object, numbers are integers or floats'
	echo '  myint = 7 ; myfloat = 7.0 ; mystring = "seven"'
	echo 'OPERATIONS'
	echo '  NUMBERS:'
	echo '    + - * / ** % # Plus, Minus, Times, Divided, Elevated, Modulo'
	echo '  STRINGS:'
	echo '    mystring + mystring ; mystring * 2 # Both give sevenseven'
	echo '    mystring + mystring # Gives sevenseven'
        echo '    len(mystring) # Gives length of the string'
	echo 'COMMANDS'
        echo '  STRINGS: Defined with double (better) or single quotes'
        echo '    mystring.index("char")      # Find index of first instance of char'
        echo '    mystring.count("char")      # Count instances of char'
        echo '    mystring.upper("char")      # Turn to upper case, also works with lower'
        echo '    mystring.split("char")      # Makes a list of strings splitting at char, most often space " "'
        echo '    mystring.startswith("char") # True if string starts with char, also works with endswith'
        echo '    mystring[-1:5:2]  # Extract string starting from last character to the 4th with stride of 2'
	echo '  LISTS: they can contain anything, defined with square brakets, indexing starts with 0'
	echo '    mylist = []          # Declares an empty list'
        echo '    len(mylist)          # Gives the length of the list'
        echo '    mylist.append("7.0") # Adds element 7.0 to the end of mylist'
        echo '    mylist.count(x)      # Counts how many of object x are in the list'
	echo '  TUPLE: immutable lists, defined with parenthesis'
	echo 'CONDITIONS'
	echo '  BOOLEANS: True and False'
	echo '    if x == 2 or x > 3 and y < 0:'
	echo '        print True'
	echo '    elif name in ["Bob","Tim"]:'
	echo '        print name is either Bob or Tim'
	echo 'ITERATIONS'
        echo '  for i in range(0,40):  # for numbers from 0 to 39 print until 10'
	echo '      print i'
	echo '      if i == 10:'
	echo '           break'
	echo '  while n < 10:  # continue goes to the next iteration step'
	echo '      if n < 5:'
	echo '           continue'
	echo '      n = n + 1'
	echo '  else'
	echo '      print "done"'
	echo 'FUNCTIONS'
        echo '  def myfunc(arg1,arg2):'
	echo '      return arg1 + arg2'
        echo '  somma = myfunc(1,2)'
	echo 'OBJECTS'
	echo '  CLASSES: templates containing various variables or functions'
        echo '    class identity:'
	echo '        firstname = "blank"'
	echo '        lastname  = "blank"'
        echo '        def fullname(firstnam,lastnam):'
        echo '            return firstnam + " " + lastnam'
	echo '  OPERATIONS: accessing objects'
        echo '    io = identity()'
        echo '    io.firstname = "Franco"'
	echo 'MODULES'
	echo '  IMPORTING: A module is a .py file that lists objects, classes, and functions'
        echo '    import numpy as np  # import numpy.py and use it as np.func() etcetera'
        echo '    dir(np)             # list functions in the module'
        echo '    help(np.pi)         # seek help for function pi'
	echo '  PACKAGE: A directory containing a __init__.py file and multiple .py modules'
        echo '    import package.module       # access it as package.module.function()'
        echo '    from package import module  # access it as module.function()'
      ;;
      regex )
        echo ".    = Any single character"
        echo "a|b  = matches either a or b"
        echo "*    = Preceding pattern zero or more times"
        echo "+    = Preceding pattern one or more times"
        echo "?    = Preceding pattern zero or one times"
        echo "^,$  = Start and End of line, respectively"
      ;;
      rsync )
	echo "rsync -avn --exclude-from=[exclude-file] source destination"
	echo "      -a syncs all"
	echo "      -v verbose"
	echo "      -n dry run to test before doing anything"
	echo "      -P to visualize progress and allow restart"
	echo "      -z to compress files"
	echo "      --delete to delete files that no longer exist"
	echo "      --exclude-from reads patterns to exclude from a specified file"
      ;;
      sed )
	echo "Delete all lines starting with pattern and 2 lines after them:"
	echo "  $ sed  -i '/pattern/,3d' file"
	echo "Delete last line:"
	echo "  $ sed  -i '\$d' file"
	echo "Change all lines starting with pattern:"
	echo "  $ sed  -i 's/^pattern.*$/replacement/g' file"
      ;;
      ssh )
        echo "ssh -X user@where (to use graphical softwares)"
	echo ""
        echo "ssh user@where command (to run any command remotely)"
        echo "ssh user@where 'bash -s' <<< command"
	echo ""
	echo "Generate key!"
	echo "ssh-keygen -t rsa (then press Enter a bunch of times)"
	echo "ssh-copy-id user@where"
      ;;
      slurm )
        echo "saldo -bc (Project allotted time remaining balance)"
        echo "sinfo -s (Prints queue information about nodes and partitions)"
        echo "squeue (List jubs in the schedule)"
        echo "sbatch job_script.sh (submit job)"
        echo "scancel job_ID (Cancel Job)"
      ;;
      svn )
        echo "svn info   #Print information about repository"
        echo "svn status #Print information about changes"
        echo ""
        echo "svn ls svn+ssh://dev@svn.scm.com/home/svn/src/branches/FrancoEgidi/MyBranch"
        echo "svn checkout svn+ssh://dev@svn.scm.com/home/svn/src/branches/FrancoEgidi/MyBranch ams2020.new"
        echo "svn copy -r NUMBER svn+ssh://dev@svn.scm.com/home/svn/src/trunk svn+ssh://dev@svn.scm.com/home/svn/src/branches/FrancoEgidi/MyBranch -m MESSAGE"
        echo "svn switch svn+ssh://dev@svn.scm.com/home/svn/src/branches/FrancoEgidi/MyBranch"
        echo "svn add/delete file"
        echo "svn commit -m \"My message\""
      ;;
      tags | ctags )
        echo 'SETUP TAGS FILE:'
        echo '  ctags -R $directory'
        echo '  mv tags $HOME/.tags'
        echo 'SETUP VIM OPTIONS IN .vimrc:'
        echo '  if filereadable($HOME."/.tags")'
        echo '    "look for the .tags file"'
        echo '    set tags=~/.tags'
        echo '    "make ctags open routines as new vertical splits with Ctrl+\"'
        echo '    map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>'
        echo '  endif'
        echo 'EXPECTED USE:'
        echo '  Hover the cursor on the routine name, then:'
        echo '  Ctrl+\ should open a new vertical split on the right'
        echo '  Ctrl+] should replace current window with tagged file'
        echo '  :pop   should close the tagged window'
      ;;
      tar )
        echo "tar -xvf goofy.tar             (opens the uncompressed archive goofy.tar and puts it in the folder)"
	echo "tar -cvf goofy.tar file1 file2 (creates the uncompressed archive goofy.tar with file1 and file2)"
	echo "tar -rvf goofy.tar addme.new   (adds addme.new to goofy.tar)"
	echo "tar -tf  goofy.tar             (lists the contents of an archive)"
	echo "  use the -z option to handle gzip files .tgz or .tar.gz"
      ;;
      user* | group* | grp | usr )
        echo "sudo adduser NEWSER"
	echo "sudo usermod -a -G GROUP NEWSER"
	echo "sudo deluser USER GROUP"
	echo "sudo groupadd GROUP"
      ;;
      misc )
        echo 'COMPARE FILES : cmp $1 $2 || vimdiff $1 $2'
        echo 'ABSOLUTE PATH : realpath $1'
        echo "FILE FIND/SORT: find . -type f -exec du -ha {} + | sort -n -r | less > deleteme.tmp (non-ideal file find/sort)"
      ;;
      fosfo )
        echo $'if [[ -f final.dat ]]; then rm final.dat; fi; for i in *log; do grep -m 3 Radiative ${i} > out${i}.dat; done; paste *.dat > final.dat; sedi \'Radiative lifetime:\' \'\' final.dat ; sedi s \'\' final.dat; rm *log.dat; scp final.dat pc@192.168.2.216:~/temp'
      ;;
      * )
	echo "we do not have ${input} in the list, sorry"
    esac
  done
