#!/bin/bash
#
# ------------------------------
# GAUSSIAN JOB SUBMISSION SCRIPT
# ------------------------------
  unset outnam ; unset wrkdir ; unset gauroot ; unset comando
  unset inp ; unset opt ; unset add ; unset vrb ; unset mrg
  declare -a inp ; declare -a opt
  declare -i nsec=0 ; declare -i maxsec=3
#
# USAGE
  function usage {
    echo "USAGE: subgau [-sleep 1m] [-h] input1.com input2.com"
    echo "  If there is no queuing system then defaults to interactive submission"
    echo "  with the following optional arguments"
    echo "    -o nam  : sets the output filename to nam"
    echo "    -w wrk  : use the working directory in wrk"
    echo "    -g gau  : use the Gaussian version in path gau (experimental)"
    echo "    -a kwr  : add keyword kwr to the route section on-the-fly"
    echo "    -nonice : bully other processes to run faster"
    echo "    -k      : do not overwrite the log file (append output)"
    echo "    -m      : multi-job mode submitting all inputs at once"
    echo "    -v      : verbose submission"
    echo "    -h      : print this message and exit"
    exit 0
  }
#
# Delayed submission
  if [ "${1}" = "-sleep" ]; then
    if [ "${#}" -lt 2 ]; then usage; fi
    sleep "${2}"
    shift; shift
  fi
  if [ "${#}" -eq 0 ]; then usage; fi
#
# --------------
# PBS SUBMISSION
# --------------
#  jblsub="/home/j.bloino/bin/gxx_qsub.py"
  jblsub="/home/f.egidi/bin/gxx_qsub.py"
  if [[ "${HOSTNAME}" = "avogadro1" && -x "${jblsub}" ]]; then
    arc='-n'
#   Sort options from job files
    while [[ -n "${1}" ]]; do
      case "${1}" in
        *.com | *.gjf ) input="${1}" ; inp=( "${inp[@]}" "${input}" );;
#        *.com | *.gjf ) input="_${1%.*}.tmp.com"; cp -- "${1}" "${input}"; inp=( "${inp[@]}" "${input}" );;
        -m            ) mrg='-m';;
        -v            ) vrb='-v';;
#        -fq | --fqpar ) fq="${2}"; shift;;
        -n            ) arc='';;
        -h | --help   ) "${jblsub}" "-h"; exit 0;;
        --            ) ;;
        *             ) opt=( "${opt[@]}" "${1}" );;
      esac; shift
    done
    if [[ "${#inp[@]}" -eq 0 ]]; then echo "ERROR: no valid input file"; exit 1; fi
#   Submit all jobs
    for input in ${inp[*]}; do
      if [[ "${mrg}" = '-m' ]]; then input="${inp[*]}"; fi
#      if [[ -n "${fq}" ]]; then addfq "${fq}" "${input}" || exit 1; fi
      comando="$( echo "${jblsub}" "${opt[*]}" -- "${input}" )"
      if [[ "${vrb}" = '-v' ]]; then echo "${comando}"; fi
      eval "${comando}"
#     Submission journal
      if [[ "${USER}" = 'f.egidi' ]] && [[ "${arc}" = '-n' ]]; then
        echo "$( date )" " ; " "$( pwd )" >> /home/f.egidi/.mysubs
        echo "  "${comando} >> /home/f.egidi/.mysubs
      fi
      if [[ "${mrg}" = '-m' ]]; then break; fi
    done
#    ls -A _*.tmp.* 1> /dev/null 2>&1 && rm -- _*.tmp.*
# ----------------------
# INTERACTIVE SUBMISSION
# ----------------------
  else
#   Parse options
    log=">"
    niceness="nice"
    unset add
    if [[ -n "${TMPDIR}" ]]; then GAUSS_SCRDIR="${TMPDIR}"; fi
    while [ -n "${1}" ]; do
      case "${1}" in
        *.com | *.gjf ) inp=( "${inp[@]}" "${1}" );;
        -o | --output ) outnam="${2}"; shift;;
        -w | --wrkdir ) wrkdir="${2}"; shift;;
        -g | --gau    ) gauroot="${2}"; shift;;
        -a | --add    ) add="${add} ${2}"; shift;;
        -t | --tmpdir ) GAUSS_SCRDIR="${2}"; shift;;
        -k | --keep   ) log='>>';;
        -v            ) vrb='-v';;
        -nonice       ) niceness='';;
        -h | --help   ) usage;;
        *             ) echo "ERROR: unrecognized option ${1}"; exit 1;;
      esac; shift
    done
    if [ "${#inp[@]}" -eq 0 ]; then echo "ERROR: no valid input file"; exit 1; fi
#   Recover Gaussian executable if explicitly specified via -g
    if [ -n "${gauroot}" -a -d "${gauroot}" ]; then
      if [ -x "${HOME}/bin/setgaussian.sh" ]; then
        . ${HOME}/bin/setgaussian.sh ${vrb} -g "${gauroot}" || exit 1
      elif [ -x "$( command -v setgaussian.sh )" ]; then
        . setgaussian.sh ${vrb} -g "${gauroot}" || exit 1
      else
        echo "ERROR: script setgaussian not found"; exit 1
      fi
    fi
#   If not explicitly specified by -g check whether Gaussian is defined
    if [ -x "${gdvroot}/gdv/gdv" ]; then
      gau="gdv"
    elif [ -x "${g09root}/g09/g09" ]; then
      gau="g09"
    elif [ -x "${g16root}/g16/g16" ]; then
      gau="g16"
    else
      echo "ERROR: Gaussian environment not properly set"; exit 1
    fi
#   Check for a working directory
    if [ -n "${wrkdir}" ]; then
      if [ -d "${wrkdir}/exe-dir" ]; then
        gau="${gau} -exedir=${wrkdir}/exe-dir:${GAUSS_EXEDIR}"
      elif [ -d "${wrkdir}" ]; then
        gau="${gau} -exedir=${wrkdir}:${GAUSS_EXEDIR}"
      else
        echo "ERROR: working directory ${wrkdir} not found"; exit 1
      fi
#     Wait in case the working is still compiling
#      while [ -n "$( pgrep -n -u "${USER}" -x -- make )" ]; do wait -- "$( pgrep -n -u "${USER}" -x -- make )"; done
      while [ -d "/proc/$( pgrep -n -u "${USER}" -x -- make )" -a "$?" -eq "0" ]; do sleep 1s; done
    fi
#   Assemble and run command
    if [ -n "${outnam}" -a -f "${outnam}" -a "${log}" = ">" ]; then rm -- "${outnam}"; fi
    for file in "${inp[@]}"; do
      if [ ! -f "${file}" ]; then echo "ERROR: input file ${file} not found"; continue; fi
#     Add keywords to the input on the fly
      if [ -n "${add}" ]; then
        if [ ! -x "$( command -v sedi )" ]; then echo "ERROR: you need the sedi utility to do this"; exit 1; fi
        input="${file%.*}.tmp"
        cp -- "${file}" "${input}"
        for x in {"p","","t"}; do sedi ${vrb} -s -b "#${x} " "#${x}" "#${x} ${add}" "${input}"; done
      else
        input="${file}"
      fi
#     Select output file and run
      if [ -z "${outnam}" ]; then
        comando="${niceness} ${gau} < ${input} ${log} ${file%.*}.log"
      elif [ "${#inp[@]}" -eq 1 ]; then
        comando="${niceness} ${gau} < ${input} ${log} ${outnam}"
      else
        comando="${niceness} ${gau} < ${input} >> ${outnam}"
      fi
      if [ "${vrb}" = '-v' ]; then echo "${comando}"; fi
      eval "${comando}"
#     Remove temporary and/or annoying files
      grep -sqi "punch" "${input}" || if [[ -f "fort.7" ]] ; then rm -- "fort.7"; fi
      if [[ "${file}" != "${input}" ]]; then rm -- "${input}"; fi
    done
  fi
  exit 0
## FQ parameters
#  function fqpar {
#    local OElec1='0.11685879436'; local OHard1='0.58485173233'; local HElec1='0.00000000001'; local HHard1='0.62501048888'
#    local OElec2='0.189194'; local OHard2='0.623700'; local HElec2='0.012767'; local HHard2='0.637512'
#    local OElec3='0.189194'; local OHard3='0.523700'; local HElec3='0.012767'; local HHard3='0.537512'
#    local _OElec="${2}"; local _OHard="${3}"; local _HElec="${4}"; local _HHard="${5}"
#    model="$( echo "${1}" | tr '[:upper:]' '[:lower:]' )"
#    case "${model}" in
#      rick | old | 1 ) eval ${_OElec}="'${OElec1}'"; eval ${_OHard}="'${OHard1}'"; eval ${_HElec}="'${HElec1}'"; eval ${_HHard}="'${HHard1}'";;
#      ivan |       2 ) eval ${_OElec}="'${OElec2}'"; eval ${_OHard}="'${OHard2}'"; eval ${_HElec}="'${HElec2}'"; eval ${_HHard}="'${HHard2}'";;
#      bar* | epr | 3 ) eval ${_OElec}="'${OElec3}'"; eval ${_OHard}="'${OHard3}'"; eval ${_HElec}="'${HElec3}'"; eval ${_HHard}="'${HHard3}'";;
#      *              ) echo "ERROR: Invalid PEmbed model ${model}"; return 1
#    esac
#  }
#  function addfq {
#    local model="${1}"; local input="${2}"
#    local OElec; local OHArd; local HElec; local HHard
#    fqpar "${model}" OElec OHard HElec HHard || return 1
#    if [[ ! -f "${input}" ]]; then echo "ERROR: File ${input} not found"; return 1; fi
#    sedi _OELEC ${OElec} "${input}"; sedi _OHARD ${OHard} "${input}"
#    sedi _HELEC ${HElec} "${input}"; sedi _HHARD ${HHard} "${input}"
#  }
##
